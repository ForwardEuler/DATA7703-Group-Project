# -*- coding: utf-8 -*-
"""7703/svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sTNBa8tgY6VtbydDJb8VLpDcaC8iTTAd
"""

from sklearn.metrics import f1_score, accuracy_score, roc_auc_score, 
import numpy as np
from numpy import ndarray
import pandas as pd
import matplotlib.pyplot as plt

class f_ndarray:
    def msave(name: str, df, dtype=np.float32, compress=True) -> None:
        """
        Save a numeric pandas Dataframe or numpy ndarray to a npz file.
        Parameters
        ----------
        name : str
            file name of npz file.
        df :
            pandas Dataframe or numpy ndarray, if a pandas Dataframe is provided
            its value must be numeric.
        dtype :
            dtype of saved data, default = float32
        compress :
            compress data in npz file. default = True
        """
        if type(df) == ndarray:
            if compress is True:
                np.savez_compressed(name, data=df)
            else:
                np.savez(name, data=df)
            return
        if type(df) == pd.DataFrame:
            cname = df.columns.values.tolist()
            cname = np.array(cname)
            data = df.to_numpy(dtype=dtype)
            if compress:
                np.savez_compressed(name, cname=cname, data=data)
            else:
                np.savez(name, cname=cname, data=data)
            return
        raise TypeError("In function msave: Only ndarrays and pd.DataFrames are allowed")
    
    
    def mload(file_name: str):
        m = np.load(file_name)
        if len(m) >= 2:
            df = pd.DataFrame(m['data'], columns=m['cname'])
            return df
        else:
            return m['data']

df_train = f_ndarray.mload('train.npz')
df_test = f_ndarray.mload('test.npz')


from sklearn.model_selection import train_test_split
df_train,_ = train_test_split(df_train, test_size = 0.99, random_state = 30, stratify = df_train[['isDefault']])
df_test,_ = train_test_split(df_test, test_size = 0.99, random_state = 30, stratify = df_test[['isDefault']])




X_train = df_train.drop(['isDefault'],axis = 1)
y_train = df_train['isDefault']
X_test = df_test.drop(['isDefault'],axis = 1)
y_test = df_test['isDefault']

from sklearn import svm
from sklearn.model_selection import GridSearchCV
model = svm.SVC(probability=True,kernel = 'linear',C = 1)
#    params = [
 #   {'kernel':['linear'],'C':[1,10,100,1000]},
  #  {'kernel':['poly'],'C':[1,10],'degree':[2,3]},
   # {'kernel':['rbf'],'C':[1,10,100,1000], 
    # 'gamma':[1,0.1, 0.01, 0.001]}]
    #model = GridSearchCV(estimator=model, param_grid=params, cv=5,scoring = "roc_auc")	 
    #model.fit(X_train, y_train)
model.fit(X_train,y_train)
accuracy_score(X_test,y_test)


from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
dt = DecisionTreeClassifier()
dt_param_grid = {'random_state':[30],'max_features':[i for i in range(1,40)],'max_depth':[i for i in range(1,30)]}
#dt_param_grid = {'random_state':[30],'max_depth':[i for i in range(1,31)]}
modelgsdt = GridSearchCV(dt,param_grid = dt_param_grid, cv=4, scoring="roc_auc", n_jobs= -1, verbose = 1)
modelgsdt.fit(X_train,y_train)
#modelgsdt.best_estimator_
#dt.fit(X_train,y_train)
#y_pred = dt.predict(X_test)
#roc_auc_score(y_pred,y_test)

dt = DecisionTreeClassifier(max_depth=7, max_features=33, random_state=30)
dt.fit(X_train,y_train)
y_pred = dt.predict(X_test)
roc_auc_score(y_pred,y_test)


from sklearn import svm
svm = svm.LinearSVC(penalty='l2', loss='squared_hinge', dual=True, tol=0.0001, C=1.0, multi_class='ovr', fit_intercept=True, intercept_scaling=1, class_weight=None, verbose=0, random_state=None, max_iter=1000)
svm.fit(X_train,y_train)
y_pred = svm.predict(X_test)
roc_auc_score(y_pred,y_test)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

from sklearn.metrics._classification import recall_score

cm = confusion_matrix(y_test,y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
r = recall_score(y_test,y_pred,average='macro')
disp.plot()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def make_confusion_matrix(cf,
                          group_names=None,
                          categories='auto',
                          count=True,
                          percent=True,
                          cbar=True,
                          xyticks=True,
                          xyplotlabels=True,
                          sum_stats=True,
                          figsize=None,
                          cmap='Blues',
                          title=None):
    '''
    This function will make a pretty plot of an sklearn Confusion Matrix cm using a Seaborn heatmap visualization.
    Arguments
    ---------
    cf:            confusion matrix to be passed in
    group_names:   List of strings that represent the labels row by row to be shown in each square.
    categories:    List of strings containing the categories to be displayed on the x,y axis. Default is 'auto'
    count:         If True, show the raw number in the confusion matrix. Default is True.
    normalize:     If True, show the proportions for each category. Default is True.
    cbar:          If True, show the color bar. The cbar values are based off the values in the confusion matrix.
                   Default is True.
    xyticks:       If True, show x and y ticks. Default is True.
    xyplotlabels:  If True, show 'True Label' and 'Predicted Label' on the figure. Default is True.
    sum_stats:     If True, display summary statistics below the figure. Default is True.
    figsize:       Tuple representing the figure size. Default will be the matplotlib rcParams value.
    cmap:          Colormap of the values displayed from matplotlib.pyplot.cm. Default is 'Blues'
                   See http://matplotlib.org/examples/color/colormaps_reference.html
                   
    title:         Title for the heatmap. Default is None.
    '''


    # CODE TO GENERATE TEXT INSIDE EACH SQUARE
    blanks = ['' for i in range(cf.size)]

    if group_names and len(group_names)==cf.size:
        group_labels = ["{}\n".format(value) for value in group_names]
    else:
        group_labels = blanks

    if count:
        group_counts = ["{0:0.0f}\n".format(value) for value in cf.flatten()]
    else:
        group_counts = blanks

    if percent:
        group_percentages = ["{0:.2%}".format(value) for value in cf.flatten()/np.sum(cf)]
    else:
        group_percentages = blanks

    box_labels = [f"{v1}{v2}{v3}".strip() for v1, v2, v3 in zip(group_labels,group_counts,group_percentages)]
    box_labels = np.asarray(box_labels).reshape(cf.shape[0],cf.shape[1])


    # CODE TO GENERATE SUMMARY STATISTICS & TEXT FOR SUMMARY STATS
    if sum_stats:
        #Accuracy is sum of diagonal divided by total observations
        accuracy  = np.trace(cf) / float(np.sum(cf))

        #if it is a binary confusion matrix, show some more stats
        if len(cf)==2:
            #Metrics for Binary Confusion Matrices
            precision = cf[1,1] / sum(cf[:,1])
            recall    = cf[1,1] / sum(cf[1,:])
            f1_score  = 2*precision*recall / (precision + recall)
            stats_text = "\n\nAccuracy={:0.3f}\nPrecision={:0.3f}\nRecall={:0.3f}\nF1 Score={:0.3f}".format(
                accuracy,precision,recall,f1_score)
        else:
            stats_text = "\n\nAccuracy={:0.3f}".format(accuracy)
    else:
        stats_text = ""


    # SET FIGURE PARAMETERS ACCORDING TO OTHER ARGUMENTS
    if figsize==None:
        #Get default figure size if not set
        figsize = plt.rcParams.get('figure.figsize')

    if xyticks==False:
        #Do not show categories if xyticks is False
        categories=False


    # MAKE THE HEATMAP VISUALIZATION
    plt.figure(figsize=figsize)
    sns.heatmap(cf,annot=box_labels,fmt="",cmap=cmap,cbar=cbar,xticklabels=categories,yticklabels=categories)

    if xyplotlabels:
        plt.ylabel('True label')
        plt.xlabel('Predicted label' + stats_text)
    else:
        plt.xlabel(stats_text)
    
    if title:
        plt.title(title)

labels = ['True Neg','False Pos','False Neg','True Pos']
categories = ['Non-Default', 'Default']
make_confusion_matrix(cm, 
                      group_names=labels,
                      categories=categories, 
                      figsize = (10,8),
                      cmap='Blues',
                      title="Confusion Matrix of ...")

from sklearn import svm
from sklearn.model_selection import GridSearchCV
model = svm.LinearSVC()
params = {'penalty':['l2'],'max_iter':[500,1000,2000,3000],'dual':[False],'intercept_scaling':[0.1,0.5,1]}
model = GridSearchCV(estimator=model, param_grid=params, cv=5,scoring = "roc_auc")	 
model.fit(X_train, y_train)

best_score = 0
for c in [1,10,100]:
    for gamma in [1,0.1]:
        svm = svm.SVC(C = c,gamma = gamma,kernel = "rbf",max_iter = 2000)
        auc = roc_auc_score(y_pred,model.predict_proba(X_test)[:,1])
        if auc>best_score:
            best_score = auc
            best_parameters = {'gamma':gamma,"c":c}

from sklearn import svm
from sklearn import svm
model = svm.SVC(probability=True,kernel = 'rbf',C =1,max_iter=2000,gamma = 0.1)
model.fit(X_train,y_train)
roc_auc_score(y_test,model.predict_proba(X_test)[:,1])