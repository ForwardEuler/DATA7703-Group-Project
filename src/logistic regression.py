# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLwO7WYeM2ua5mvmPTCehZMUBNDCoP8i
"""

from sklearn.metrics import f1_score, accuracy_score, roc_auc_score
import numpy as np
from numpy import ndarray
import pandas as pd
class f_ndarray:
    def msave(name: str, df, dtype=np.float32, compress=True) -> None:
        """
        Save a numeric pandas Dataframe or numpy ndarray to a npz file.
        Parameters
        ----------
        name : str
            file name of npz file.
        df :
            pandas Dataframe or numpy ndarray, if a pandas Dataframe is provided
            its value must be numeric.
        dtype :
            dtype of saved data, default = float32
        compress :
            compress data in npz file. default = True
        """
        if type(df) == ndarray:
            if compress is True:
                np.savez_compressed(name, data=df)
            else:
                np.savez(name, data=df)
            return
        if type(df) == pd.DataFrame:
            cname = df.columns.values.tolist()
            cname = np.array(cname)
            data = df.to_numpy(dtype=dtype)
            if compress:
                np.savez_compressed(name, cname=cname, data=data)
            else:
                np.savez(name, cname=cname, data=data)
            return
        raise TypeError("In function msave: Only ndarrays and pd.DataFrames are allowed")
    
    
    def mload(file_name: str):
        m = np.load(file_name)
        if len(m) >= 2:
            df = pd.DataFrame(m['data'], columns=m['cname'])
            return df
        else:
            return m['data']

df_train = f_ndarray.mload('train.npz')
df_test = f_ndarray.mload('test.npz')

X_train = df_train.drop(['isDefault'],axis = 1)
y_train = df_train['isDefault']
X_test = df_test.drop(['isDefault'],axis = 1)
y_test = df_test['isDefault']

#class Logistic_model(BinaryClassification):
#  def _init__(self) :
#    super().__init__.()
 #   self.name = "Logistic Regression"
#    self.model = LogisticRegression (solver='newton-cg', n_jobs=14, class_weight='balanced', tol=1-12)
  #
#  def predict_proba(self, x: ndarray) -> ndarray:
 #   return self.model.predict_proba(x)[:, 1]
#if __name__ == '__main__':
    # train and test model
#    lr = Logistic_model()
#    Ir.fit (X_train, y_train)
#    lr.evaluate (X_train,y_train)
#    lr.plot_roc()
#    lr.plot_confusion_matrix()

#lr = Logistic_model()
#Ir.fit (X_train, y_train)
#lr.evaluate (X_train,y_train)
#lr.plot_roc()
#lr.plot_confusion_matrix()


from sklearn import metrics
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train, y_train)
# 使用模型预测
predicted = lr.predict(X_test)   #预测分类
answer = lr.predict_proba(X_test)  #预测分类概率
roc_auc_score(y_test,lr.predict_proba(X_test)[:,1])

import numpy as np
from numpy import ndarray
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
def plot_roc(test_y_true: ndarray, test_y_proba: ndarray, name: str) -> None:
    fpr, tpr, _ = roc_curve(test_y_true, test_y_proba)
    roc_auc = auc(fpr, tpr)
    plt.figure(figsize=(6,6))
    lw = 2
    plt.plot(
        fpr,
        tpr,
        color="darkorange",
        lw=lw,
        label="ROC curve (area = %0.2f)" % roc_auc,
    )
    plt.plot([0, 1], [0, 1], color="navy", lw=lw, linestyle="--")
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    pname = "Receiver operating characteristic of " + name
    plt.title(pname)
    plt.legend(loc="lower right")
    plt.grid(True)
    plt.show()
y_pred_proba = lr.predict_proba(X_test)[:,1]
plot_roc(y_test,y_pred_proba,"LogisticRegression")

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def make_confusion_matrix(cf,
                          group_names=None,
                          categories='auto',
                          count=True,
                          percent=True,
                          cbar=True,
                          xyticks=True,
                          xyplotlabels=True,
                          sum_stats=True,
                          figsize=None,
                          cmap='Blues',
                          title=None):
    '''
    This function will make a pretty plot of an sklearn Confusion Matrix cm using a Seaborn heatmap visualization.
    Arguments
    ---------
    cf:            confusion matrix to be passed in
    group_names:   List of strings that represent the labels row by row to be shown in each square.
    categories:    List of strings containing the categories to be displayed on the x,y axis. Default is 'auto'
    count:         If True, show the raw number in the confusion matrix. Default is True.
    normalize:     If True, show the proportions for each category. Default is True.
    cbar:          If True, show the color bar. The cbar values are based off the values in the confusion matrix.
                   Default is True.
    xyticks:       If True, show x and y ticks. Default is True.
    xyplotlabels:  If True, show 'True Label' and 'Predicted Label' on the figure. Default is True.
    sum_stats:     If True, display summary statistics below the figure. Default is True.
    figsize:       Tuple representing the figure size. Default will be the matplotlib rcParams value.
    cmap:          Colormap of the values displayed from matplotlib.pyplot.cm. Default is 'Blues'
                   See http://matplotlib.org/examples/color/colormaps_reference.html
                   
    title:         Title for the heatmap. Default is None.
    '''


    # CODE TO GENERATE TEXT INSIDE EACH SQUARE
    blanks = ['' for i in range(cf.size)]

    if group_names and len(group_names)==cf.size:
        group_labels = ["{}\n".format(value) for value in group_names]
    else:
        group_labels = blanks

    if count:
        group_counts = ["{0:0.0f}\n".format(value) for value in cf.flatten()]
    else:
        group_counts = blanks

    if percent:
        group_percentages = ["{0:.2%}".format(value) for value in cf.flatten()/np.sum(cf)]
    else:
        group_percentages = blanks

    box_labels = [f"{v1}{v2}{v3}".strip() for v1, v2, v3 in zip(group_labels,group_counts,group_percentages)]
    box_labels = np.asarray(box_labels).reshape(cf.shape[0],cf.shape[1])


    # CODE TO GENERATE SUMMARY STATISTICS & TEXT FOR SUMMARY STATS
    if sum_stats:
        #Accuracy is sum of diagonal divided by total observations
        accuracy  = np.trace(cf) / float(np.sum(cf))

        #if it is a binary confusion matrix, show some more stats
        if len(cf)==2:
            #Metrics for Binary Confusion Matrices
            precision = cf[1,1] / sum(cf[:,1])
            recall    = cf[1,1] / sum(cf[1,:])
            f1_score  = 2*precision*recall / (precision + recall)
            stats_text = "\n\nAccuracy={:0.3f}\nPrecision={:0.3f}\nRecall={:0.3f}\nF1 Score={:0.3f}".format(
                accuracy,precision,recall,f1_score)
        else:
            stats_text = "\n\nAccuracy={:0.3f}".format(accuracy)
    else:
        stats_text = ""


    # SET FIGURE PARAMETERS ACCORDING TO OTHER ARGUMENTS
    if figsize==None:
        #Get default figure size if not set
        figsize = plt.rcParams.get('figure.figsize')

    if xyticks==False:
        #Do not show categories if xyticks is False
        categories=False


    # MAKE THE HEATMAP VISUALIZATION
    plt.figure(figsize=figsize)
    sns.heatmap(cf,annot=box_labels,fmt="",cmap=cmap,cbar=cbar,xticklabels=categories,yticklabels=categories)

    if xyplotlabels:
        plt.ylabel('True label')
        plt.xlabel('Predicted label' + stats_text)
    else:
        plt.xlabel(stats_text)
    
    if title:
        plt.title(title)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
y_pred = lr.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
labels = ['True Neg','False Pos','False Neg','True Pos']
categories = ['Non-Default', 'Default']
make_confusion_matrix(cm, 
                      group_names=labels,
                      categories=categories, 
                      figsize = (10,8),
                      cmap='Blues',
                      title="Confusion Matrix of LogisticRegression")

coef = pd.concat([pd.DataFrame(X_train.columns.values),pd.DataFrame(lr.coef_,index=list('1')).T],axis = 1)
coef.to_csv('coef.csv',index=0)


from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant

df = X_train
 
X = add_constant(df)
pd.Series([variance_inflation_factor(X.values, i) 
               for i in range(X.shape[1])], 
              index=X.columns)

def process(data, col):
    data = data.loc[:, col] 
    vif = [variance_inflation_factor(data.values, i) for i in range(data.shape[1])][1:] 
    if max(vif) >= 5:
        index = np.argmax(vif)+1 
        del col[index] 
        return process(data, col) 
    else:
        vif = [variance_inflation_factor(data.values, i) for i in range(data.shape[1])][1:]
        return col, vif
    
cols = X.columns.tolist()
cols,vif = process(X,cols)



data = X.loc[:, cols]


X_vif = data.drop(columns=['const'])
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_vif, y_train)
y_pred_vif = lr.predict(X_test.loc[:, X_vif.columns.tolist()])
coef2 = pd.concat([pd.DataFrame(X_vif.columns.values),pd.DataFrame(lr.coef_,index=list('1')).T],axis = 1)
roc_auc_score(y_test,lr.predict_proba(X_test.loc[:, X_vif.columns.tolist()])[:,1])
coef2.to_csv('coef2.csv',index=0)
vif_table = pd.concat([pd.DataFrame(X_vif.columns.values),pd.DataFrame(vif)],axis=1)
vif_table.to_csv('vif_table.csv',index=0)


df_all = pd.concat([df_train,df_test])
from sklearn.model_selection import train_test_split
df_train_x, _ = train_test_split(df_all, train_size=0.5390651581)
X_train_x = df_train_x.drop(['isDefault'],axis = 1)
y_train_x = df_train_x['isDefault']

df_x = X_train_x
 
X_x = add_constant(df_x)

def process(data, col):
    data = data.loc[:, col]
    vif = [variance_inflation_factor(data.values, i) for i in range(data.shape[1])][1:] 
    if max(vif) >= 5:
        index = np.argmax(vif)+1 
        del col[index] 
        return process(data, col)
    else:
        vif = [variance_inflation_factor(data.values, i) for i in range(data.shape[1])][1:]
        return col, vif
    
cols_x = X_x.columns.tolist()
cols_x,vif_x = process(X_x,cols_x)



data_x = X_x.loc[:, cols_x]


X_vif_x = data_x.drop(columns=['const'])
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
lr_x = LogisticRegression()
lr_x.fit(X_vif_x, y_train_x)
coef_x = pd.concat([pd.DataFrame(X_vif_x.columns.values),pd.DataFrame(lr_x.coef_,index=list('1')).T],axis = 1)
coef_x.to_csv('coef_x.csv',index=0)

lr_newton = LogisticRegression(solver = "newton-cg")
lr_newton.fit(X_vif, y_train)
coef_newton = pd.concat([pd.DataFrame(X_vif.columns.values),pd.DataFrame(lr_newton.coef_,index=list('1')).T],axis = 1)
roc_auc_score(y_test,lr_newton.predict_proba(X_test.loc[:, X_vif.columns.tolist()])[:,1])
coef_newton.to_csv('coef_newton.csv',index=0)

